generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institute {
  id             String         @id @default(uuid())
  name           String         @unique
  email          String         @unique
  password       String
  departments    Department[]  
  academicBlocks AcademicBlock[]
  faculties      Faculty[]
  rooms          Room[]
  courses        Course[]
  scheduels      Schedule[]
  studentGroups  StudentGroup[]
}

model Department {
  id           String       @id @default(uuid())
  name         String
  code         String
  instituteId  String

  faculties    Faculty[]
  courses      Course[]
  StudentGroups     StudentGroup[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

enum FacultyRank {
  PROFESSOR
  ASSOCIATE_PROFESSOR
  ASSISTANT_PROFESSOR
}

model Faculty {
  id           String       @id @default(uuid())
  name         String
  email        String
  rank         FacultyRank
  departmentId String
  instituteId  String
  constarints FacultyConstraints[]
  classes Class[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  department   Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model FacultyConstraints {
  id String @id @default(uuid())
  facultyId String
  scheduleId String
  constraints Int[]

  faculty Faculty    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  schedule Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

}

model Course {
  id           String       @id @default(uuid())
  name         String
  credits      Int
  departmentId String
  isLab        Boolean       @default(false)
  code         String
  instituteId  String
  classes      Class[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  department   Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model AcademicBlock {
  id           String       @id @default(uuid())
  name         String?
  blockCode    String       @unique
  instituteId  String

  rooms        Room[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

model Room {
  id            String        @id @default(uuid())
  floor         String
  name          String?       
  code          String
  blockId       String
  instituteId   String
  capacity      Int           @default(0)
  isLab         Boolean
  institute     Institute     @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  academicBlock AcademicBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
  classes       Class[]
}

model Schedule {
  id  String @id @default(uuid())
  name String
  days Int @default(1)
  slots Int @default(1)
  rooms Room[]
  classes Class[]
  studentGroups StudentGroup[]
  facultyConstraints FacultyConstraints[]
  studentGroupConstraints StudentGroupConstraints[]
  instituteId String
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

model StudentGroup {
  id String @id @default(uuid())
  name String
  departmentId String 
  batchCount Int
  passingYear Int
  section String
  batches Batch[]
  classes Class[]
  schedules Schedule[]
  constarints StudentGroupConstraints[]

  instituteId  String
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model StudentGroupConstraints {
  id String @id @default(uuid())
  studentGroupId String
  scheduleId String
  constraints Int[]

  studentGroup StudentGroup    @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
  schedule Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

}

model Batch {
  id String @id @default(uuid())
  name String
  studentGroupId String
  classes Class[]

  StudentGroup StudentGroup @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
}

model Class {
  id String @id @default(uuid())
  facultyId String
  studentGroupId String
  courseId String
  batchId String? 
  isLab Boolean? @default(false)
  roomId String
  scheduleId String

  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  StudentGroup StudentGroup @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  batch Batch? @relation(fields: [batchId], references: [id], onDelete: Cascade)
}


